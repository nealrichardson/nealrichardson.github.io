[{"path":"https://enpiar.com/r/httptest/articles/faq.html","id":"where-are-my-mocks-recorded","dir":"Articles","previous_headings":"","what":"Where are my mocks recorded?","title":"Frequently Asked Questions","text":"default, destination path capture_requests() relative current working directory process. matches behavior with_mock_api(), looks files relative directory, typically tests/testthat/. ’re running capture_requests within test suite installed package, ’re running interactively different directory, working directory may code repository. aren’t sure files going, set options(httptest.verbose=TRUE), message absolute path files writes . change files written read , use .mockPaths() (like base::.libPaths()) specify different directory.","code":""},{"path":"https://enpiar.com/r/httptest/articles/faq.html","id":"how-do-i-fix-non-portable-file-paths","dir":"Articles","previous_headings":"","what":"How do I fix “non-portable file paths”?","title":"Frequently Asked Questions","text":"see error R CMD build R CMD check, means file paths longer 100 characters, can sometimes happen record requests. httptest preserves URL structure mocks file paths improve readability maintainability tests, well make visible properties API. Indeed, file-system tree view mock files gives visual representation API. value comes tradeoff: sometimes URLs can long, R doesn’t like . Depending long URLs , ways save characters without compromising readability code tests. big way cut long file paths using request preprocessor: function alters content ‘httr’ request mapping mock file. example, API endpoints sit beneath https://language.googleapis.com/v1/, set request preprocessor like: mocked requests look path starting “api/” rather “language.googleapis.com/v1/”, saving (case) 23 characters. can also provide function inst/httptest/request.R, time package loaded (run tests build vignettes), function called automatically. See vignette(\"redacting\") . may also able economize parts file paths. ’ve recorded requests file paths contain long ids like “1495480537a3c1bf58486b7e544ce83d”, depending access API code, may able simply replace id something shorter, like “1”. mocks just files, disconnected real server API, can rename munge needed. Finally, tests inside tests/testthat/ directory, fixture files inside , can save 9 characters moving fixtures tests/ setting .mockPaths(\"../\").","code":"set_requester(function (request) {   gsub_request(request, \"https\\\\://language.googleapis.com/v1/\", \"api/\") })"},{"path":"https://enpiar.com/r/httptest/articles/faq.html","id":"how-do-i-switch-between-mocking-and-real-requests","dir":"Articles","previous_headings":"","what":"How do I switch between mocking and real requests?","title":"Frequently Asked Questions","text":"httptest intend every request test suite something run live server. practical reasons able see, modify, maintain test fixtures, rather re-record every time make change. Among considerations: many cases, API responses contain way content necessary test R code around : 100 records 2 suffice, request metadata don’t care can’t meaningfully assert things , . interest minimally reproducible examples, making tests readable, often makes sense take actual API response delete lot content, even fabricate one entirely. ’s good keep API mock fixed know exactly . re-recorded Twitter API response , say, recent 10 tweets #rstats, specific content change every time record , tests can’t say much response without rewrite every time . conditions (rate limiting, server errors, e.g.) difficult test real responses, can hand-create API mock , say, 503 response status code test code handles , can confidence package respond rare event happens real API. Re-recording responses can make huge code diff, can blow repository size make code review harder. said, can worthwhile subset tests can run live API can detect respond API changes. One option set tests with_mock_dir() context instead with_mock_api(). example: first time run code, create directory tests/testthat/httpbin-get, create mock files . next times run , use mock files tests/testthat/httpbin-get. re-record, simply delete directory. Another option secondary integration test suite code repository, directory outside standard R package directories included .Rbuildignore doesn’t get packaged. run locally testthat::test_dir(), run continuous integration builds replacing tests/testthat directory alternate test directory.","code":"with_mock_dir(\"httpbin-get\", {   a <- GET(\"https://httpbin.org/get\")   print(a) })"},{"path":"https://enpiar.com/r/httptest/articles/httptest.html","id":"the-with_mock_api-context","dir":"Articles","previous_headings":"","what":"The with_mock_api context","title":"httptest: A Test Environment for HTTP Requests in R","text":"package includes three contexts, “”-style functions wrap around code want execute. generally useful three with_mock_api(). context, HTTP requests intercepted mapped local file paths. file exists, loaded returned response; , error message containing request information raised, can write tests look error. two different modes allow us make assertions two different kinds logic: (1) given inputs, code make correct HTTP request(s); (2) code correctly handle types responses server can return?","code":""},{"path":"https://enpiar.com/r/httptest/articles/httptest.html","id":"example","dir":"Articles","previous_headings":"The with_mock_api context","what":"Example","title":"httptest: A Test Environment for HTTP Requests in R","text":"illustrate power with_mock_api, let’s try add tests R package wraps prominent web API. twitteR package quite popular (13k downloads per month, time writing), like R packages, doesn’t test suite. Indeed, hard test querying API requires OAuth authentication, thus user account use testing. ’s tricky set run locally, even challenging run continuous-integration service like Travis-CI. httptest can help. First, need add httptest package test suite. ’ve configured package use testthat (usethis::use_testthat() one way), run httptest::use_httptest(). adds httptest package DESCRIPTION makes sure loaded test setup code. Now can start tests. experimenting, ’s clear package checks see OAuth token set. ’re actually going hit real Twitter API, don’t need valid token—just need token exist R code looks token finds one: Let’s write test. Add “test-user.R” test directory put test getting user record, via getUser function. According source code, function hit “show user” Twitter API, documented . , ’re going prevent request actually happening wrapping test with_mock_api. run tests, fails error message reveals things with_mock_api works. First, tells us request method URL , request body, part error message well. Second, final part error message file name. ’s mock file test context looking didn’t find. file existed, loaded code continued executing server returned . Requests translated mock file paths according several rules incorporate request method, URL, query parameters, body. Query parameters request bodies incorporated file path hashing—hence 84627b getUser example. request method GET used, appended end end file name. Mock file paths also extension appended HTTP API, “directory” resource. extension allows distinguishing directories files file system. , mocked GET(\"http://example.com/api/\") may read “example.com/api.json” file, GET(\"http://example.com/api/object1/\") reads “example.com/api/object1.json”, POST(\"api/object1/?=1\") map “api/object1-b64371-POST.json”. file extension also gives information content type. Files .json, .html, .xml, .txt, .csv, .tsv loaded directly with_mock_api, relevant request metadata (Content-Type header, status code 200, etc.) inferred. API doesn’t return one types, want simulate requests behavior (201 Location response, 400 Bad Request, example), can store full response objects .R files with_mock_api source load. request can stored .R mock, .json media types offer simplified, readable alternative. Back getUser example. error message tells us request making—GET https://api.twitter.com/1.1/users/show.json?screen_name=twitterdev—expect based API documentation, ’s good. Now let’s provide mock response. API documentation page example JSON response, looks like Let’s copy example response fixture file path message indicated, api.twitter.com/1.1/users/show.json-84627b.json. run tests , ’s error. Great! means with_mock_api loaded mock reached GET request, rest code continued executing. getUser returns “user” object, let’s now assert things test methods: can lookupUsers function. hit users/lookup.json endpoint function return list user objects: Drop example response API documentation right location, passes well. just went zero tests 25 percent line coverage minutes, using 16 lines code. ’ve tested lot code prepares requests user API, ’ve tested much code handles server’s response, “user” objects get created R, methods. resulting test directory, containing test files API fixtures, looks like : full test code looks like : Note none test code inside with_mock_api block looks different ’d write testing live server using just testthat. goal make tests just natural write using package normally. with_mock_api context handles HTTP mocking seamlessly.","code":"use_oauth_token(\"foo\") context(\"Get a user\")  with_mock_api({   test_that(\"We can get a user object\", {     user <- getUser(\"twitterdev\")   }) }) Get a user: Error:     GET https://api.twitter.com/1.1/users/show.json?screen_name=twitterdev     (api.twitter.com/1.1/users/show.json-84627b.json) {   \"id\": 2244994945,   \"id_str\": \"2244994945\",   \"name\": \"TwitterDev\",   \"screen_name\": \"TwitterDev\",   \"location\": \"Internet\",   \"profile_location\": null,   \"description\": \"Developer and Platform Relations @Twitter. We are       developer advocates. We can't answer all your questions, but we listen       to all of them!\",   \"url\": \"https://t.co/66w26cua1O\",   ... } test_that(\"We can get a user object\", {   user <- getUser(\"twitterdev\")   expect_is(user, \"user\")   expect_identical(user$name, \"TwitterDev\")   expect_output(print(user), \"TwitterDev\") }) test_that(\"lookupUsers retrieves many\", {   result <- lookupUsers(c(\"twitterapi\", \"twitter\"))   expect_is(result, \"list\")   expect_true(all(vapply(result, inherits, logical(1), what = \"user\"))) }) tests ├── testthat │   ├── api.twitter.com │   │   └── 1.1 │   │       └── users │   │           ├── lookup.json-342984.json │   │           └── show.json-84627b.json │   ├── setup.R │   └── test-user.R └── testthat.R context(\"Get a user\")  use_oauth_token(\"foo\") # Pulled here from setup.R for clarity  with_mock_api({   test_that(\"We can get a user object\", {     user <- getUser(\"twitterdev\")     expect_is(user, \"user\")     expect_identical(user$name, \"TwitterDev\")     expect_identical(name(user), \"TwitterDev\")     expect_output(print(user), \"TwitterDev\")   })    test_that(\"lookupUsers retrieves many\", {     result <- lookupUsers(c(\"twitterapi\", \"twitter\"))     expect_is(result, \"list\")     expect_true(all(vapply(result, inherits, logical(1), what = \"user\")))   }) })"},{"path":"https://enpiar.com/r/httptest/articles/httptest.html","id":"recording-mocks-with-capture_requests","dir":"Articles","previous_headings":"","what":"Recording mocks with capture_requests","title":"httptest: A Test Environment for HTTP Requests in R","text":"Using API documentation build library fixtures one way set testing using with_mock_api. Alternatively, can collect real HTTP responses use test fixtures. capture_requests() context records responses requests make stores mock files. enables perform series requests live server build test suite using mocks, running tests with_mock_api. interactive session, may easier use functions start_capturing stop_capturing rather context manager. can set R session, call start_capturing(), whatever commands function calls make HTTP requests, responses grabbed. something like result, ’d see file created path/name api.twitter.com/1.1/search/tweets.json-ca54df.json. file contain JSON containing status matching search query, per docs. capture_requests context start_capturing function follow path setting .mockPaths(), lets specify location current working directory write response files. also “simplify” argument , TRUE (default), records simplified .json, .csv, .xml, et al. files appropriate (200 OK response supported Content-Type) .R full “response” objects otherwise. recording responses use later tests can convenient, don’t always want use captured responses, least blindly. Real responses may contain information want sanitize redact, like usernames, emails, tokens. real responses may big messy want deal . may want pare back large set results query returns four five results still enough variation test .","code":"start_capturing() searchTwitter(\"#rstats\") stop_capturing()"},{"path":"https://enpiar.com/r/httptest/articles/httptest.html","id":"automatically-recordingplaying-back-the-with_mock_dir-context","dir":"Articles","previous_headings":"Recording mocks with capture_requests","what":"Automatically recording/playing back: the with_mock_dir() context","title":"httptest: A Test Environment for HTTP Requests in R","text":"with_mock_dir() context can help create mock files don’t exist yet, easily re-record . example: first time run code, create folder tests/testthat/httpbin-get, create mock files . next times run , use mock files tests/testthat/httpbin-get. re-record, simply delete folder.","code":"with_mock_dir(\"httpbin-get\", {   a <- GET(\"https://httpbin.org/get\")   print(a) })"},{"path":"https://enpiar.com/r/httptest/articles/httptest.html","id":"mocks-are-text-files","dir":"Articles","previous_headings":"","what":"Mocks are text files","title":"httptest: A Test Environment for HTTP Requests in R","text":"httptest stores API mocks plain-text files, several nice features, particularly relative storing serialized (binary) R objects. can easily confirm mocks look correct, can easily maintain without re-record . edit , text files easily handled version-control systems like Git Mercurial. Plain-text files can also comments, can make notes certain fixture exists, particular value means, , help users package—future self! mocks human-readable text files, can also easily extend code. APIs living things evolve time, code communicates API needs able change . API adds additional attribute object, big deal: just touch mocks. addition, can future-proof code kind API change tweaking fixture file. example crunch package, extra, nonsense attribute added JSON just ensure code doesn’t break new, unknown features added API response. way, API grows new features, people using package don’t get errors haven’t upgraded latest release recognizes new feature. ’re responsible API well R client code communicates , plain-text mocks can valuable source documentation. Indeed, file-system tree view mock files gives visual representation API. example, crunch package, mocks show API catalogs contain entities may contain subdocuments:","code":"app.crunch.io/ ├── api │   ├── accounts │   │   ├── account1 │   │   │   └── users.json │   │   └── account1.json │   ├── datasets │   │   ├── 1 │   │   │   ├── export.json │   │   │   ├── filters │   │   │   │   └── filter1.json │   │   │   ├── filters.json │   │   │   ├── permissions.json │   │   │   ├── summary-73a614.json │   │   │   ├── variables │   │   │   │   ├── birthyr │   │   │   │   │   ├── summary-73a614.json │   │   │   │   │   └── values-3d4982.json │   │   │   │   ├── birthyr.json │   │   │   │   ├── gender │   │   │   │   │   ├── summary.json │   │   │   │   │   └── values-51980f.json │   │   │   │   ├── gender.json │   │   │   │   ├── starttime │   │   │   │   │   └── values-3d4982.json │   │   │   │   ├── starttime.json │   │   │   │   ├── textVar │   │   │   │   │   └── values-641ef3.json │   │   │   │   ├── textVar.json │   │   │   │   └── weights.json │   │   │   ├── variables-d118fa.json │   │   │   └── variables.json │   │   ├── 1.json │   │   └── search-c89aba.json │   └── users.json └── api.json"},{"path":"https://enpiar.com/r/httptest/articles/httptest.html","id":"testing-that-requests-arent-made","dir":"Articles","previous_headings":"","what":"Testing that requests aren’t made","title":"httptest: A Test Environment for HTTP Requests in R","text":"Mocking API responses isn’t thing might want order test code. Sometimes, request matters one don’t make. httptest provides several tools test requests without concern responses, well ability ensure requests aren’t made shouldn’t . without_internet context simulates situation network request fail, without internet connection. HTTP request raise error well-defined shape, with_mock_api returns mock file found. error message three elements: request method (e.g. “GET”), request URL, request body, present. verb-expectation functions, expect_GET expect_POST, look shape. ’s example without_internet can used assert code make network requests fact . simplified version test httpcache package, library implements query cache HTTP requests R. point query cache first time make certain GET request hit remote API; subsequent requests read cache make request. test first makes request (artificially, using with_fake_http, third test context package provides) prime cache. , using without_internet, test checks two things: first, GET succeeds reads cache; second, bypass query cache, get error tried make network request. tells us cache working expected: can get results cache don’t make (potentially expensive) network request .","code":"with_fake_http({   test_that(\"Cache gets set on GET\", {     expect_length(cacheKeys(), 0)     expect_GET(a <- GET(\"https://app.crunch.io/api/\"),       \"https://app.crunch.io/api/\")     expect_length(cacheKeys(), 1)     expect_identical(a, getCache(\"https://app.crunch.io/api/\"))   }) }) without_internet({   test_that(\"When the cache is set, can read from it even with no connection\", {     expect_identical(GET(\"https://app.crunch.io/api/\")$url,       \"https://app.crunch.io/api/\")   })   test_that(\"But uncached() prevents reading from the cache\", {     expect_error(uncached(GET(\"https://app.crunch.io/api/\")),       \"GET https://app.crunch.io/api/\")   }) })"},{"path":"https://enpiar.com/r/httptest/articles/httptest.html","id":"assert-the-shape-of-request-payloads","dir":"Articles","previous_headings":"Testing that requests aren’t made","what":"Assert the shape of request payloads","title":"httptest: A Test Environment for HTTP Requests in R","text":"Sometimes clear ’re testing focus requests. One case response isn’t interesting doesn’t tell request correct thing. example, ’re testing POST request alters state something server returns 204 Content status success, nothing response (stored mock file) tells request made shaped correctly—response content. transparent, readable test just assert POST request made right URL expected request body. without_internet with_mock_api allow make assertions requests—method, URL, payload—made. various expect_VERB expectation functions facilitate testing. example crunch package, inside with_mock_api context, catalog resource containing three entities, “archived” attribute. .archived method returns value attribute: update attributes catalog’s entities, send PATCH request, want send values changing. way, don’t unintentionally collide concurrent actions happening server, can send smaller messages, faster. example, set “archived” TRUE second third elements catalog, ’d want send PATCH request referenced third element second one already TRUE. resulting state system whether smaller PATCH request sent whether overly verbose one sent. ’ve written logic R code ensure smaller PATCH sent, testing shape request made clearest way demonstrate assert desired behavior happening. Another instance might care request body shape rather resulting response multiple paths R code lead request made. can assert variations result request, comes testing response code handles , can repeat input variations. particularly useful conjunction integration tests run live server means can test coverage fewer integration tests. example crunch package testing join function, similar syntax base R merge function. merge takes “.x” “.y” arguments, point variables “x” “y” data.frames match rows merging. shortcut case variable names data.frame, case can just specify “” argument. test combinations specifying join keys result request, test defines payload string reuse asserts three different ways calling join result PATCH request made Subsequent integration tests assert dataset correctly modified server join test one ways specifying “” variables. R code constructs request fully covered assertions.","code":"test_that(\"is.archived\", {   expect_identical(is.archived(catalog), c(FALSE, TRUE, FALSE)) }) test_that(\"'archive' sets the archived attribute and only PATCHes changes\", {   expect_PATCH(archive(catalog[2:3]),     'https://app.crunch.io/api/datasets/',     '{\"https://app.crunch.io/api/datasets/3/\":{\"archived\":true}}') }) testPayload <- paste0(   '{\"https://app.crunch.io/api/datasets/1/joins/95c0b45fe0af492594863f818cb913d2/\":',   '{\"left_key\":\"https://app.crunch.io/api/datasets/1/variables/birthyr/\",',   '\"right_key\":\"https://app.crunch.io/api/datasets/3/variables/birthyr/\"}}' ) test_that(\"Can specify 'by' variables several ways\", {   expect_PATCH(join(ds1, ds2, by.x = ds1$birthyr, ds2$birthyr),     'https://app.crunch.io/api/datasets/1/joins/',     testPayload)   expect_PATCH(join(ds1, ds2, by.x = \"birthyr\", by.y = \"birthyr\"),     'https://app.crunch.io/api/datasets/1/joins/',     testPayload)   expect_PATCH(join(ds1, ds2, by = \"birthyr\"),     'https://app.crunch.io/api/datasets/1/joins/',     testPayload) })"},{"path":"https://enpiar.com/r/httptest/articles/httptest.html","id":"just-test-it","dir":"Articles","previous_headings":"","what":"Just test it","title":"httptest: A Test Environment for HTTP Requests in R","text":"goal httptest remove big obstacle testing code communicates HTTP services: HTTP service . httr makes HTTP easy testthat makes testing fun, httptest makes testing code uses HTTP simple pleasure.","code":""},{"path":"https://enpiar.com/r/httptest/articles/redacting.html","id":"default-redact-standard-auth-methods","dir":"Articles","previous_headings":"","what":"Default: redact standard auth methods","title":"Redacting and Modifying Recorded Requests","text":"default, capture_requests context evaluates redact_auth() function response object writing disk. redact_auth wraps specific redacting functions things like sanitize cookies server response. Note request parameters communicate credentials API, including cookies, authorization headers, basic HTTP auth, OAuth, also purged recorded response file: capture_requests() records response, request, even though httr response object generally includes request object. “redacting” entail? aren’t CIA working classified reports, taking heavy black marker certain details. case, redacting means replacing sensitive content string “REDACTED”. recorded responses “real” possible: , example, “Authorization” header request, header remain test fixture, real token value replaced “REDACTED”. recorded responses affected—actual response ’re capturing active R session modified, mock written . illustrate, ’s request cookie response. Let’s record . actual response object R session, cookie : load recorded response tests later, cookie won’t appear redacted: Side note: example uses simplify=FALSE option capture_requests illustration purposes. default simplify=TRUE, response body written mock file particular GET request returns JSON content. Thus, cookie present anyway. simplify=FALSE forces capture_requests write verbose .R response object file every request, just don’t return JSON content.","code":"capture_requests(simplify = FALSE, {   real_resp <- GET(\"http://httpbin.org/cookies/set?token=12345\") }) real_resp$cookies  ##        domain  flag path secure expiration  name value ## 1 httpbin.org FALSE    /  FALSE       <NA> token 12345 mockfile <- \"httpbin.org/cookies/set-5b2631.R\" mock <- source(mockfile)$value mock$cookies  ##        domain  flag path secure expiration  name    value ## 1 httpbin.org FALSE    /  FALSE       <NA> token REDACTED  mock$all_headers[[1]][[\"set-cookie\"]]  ## [1] \"REDACTED\""},{"path":"https://enpiar.com/r/httptest/articles/redacting.html","id":"writing-custom-redacting-functions","dir":"Articles","previous_headings":"","what":"Writing custom redacting functions","title":"Redacting and Modifying Recorded Requests","text":"Sensitive personal information limited response cookies headers. Sometimes identifiers built URLs response bodies. may less sensitive auth tokens, may want conceal anonymize data included test fixtures. Redacting functions can help content well. can use redactors part response object, just headers cookies. redactor just function takes response input returns response object, anything possible write custom redactor. example, API Pivotal Tracker, agile project management tool, Pivotal project id built many URLs. result, appear mock file paths record. id also often included response body. ’d rather information leak test fixtures, pivotaltrackR package, wraps API, need tell capture_requests scrub id record mocks. , ’ll use set_redactor() supply custom function. project id stored R session options(pivotal.project), can identify find--replace gsub_response(). function takes response first argument passes rest gsub(), called response URL response body. Note formula shorthand: follows syntax purrr package defining anonymous functions. equivalent function(response) gsub_response(response, getOption(\"pivotal.project\"), \"123\"). Valid inputs set_redactor() include: function taking single argument, response, returning valid response object formula shorthand anonymous function . “response” argument list redacting functions/formulas, executed sequence response NULL, override default redact_auth() redacting see action, let’s record request: Note actual project id appears data returned search. However, project id won’t found recorded file. load recorded response with_mock_api, ’ll see value substituted : project id appear file path: since redactor evaluated determining file path write , alter response URL, destination file path generated based modified URL. case, mock written “…/projects/123/stories-fb1776.json”, “…/projects/-project-name/stories-fb1776.json”. can response cleaning custom functions. redactors httptest take “response” object first argument return response object modified way. lends pipelining, magrittr package. Continuing pivotaltrackR example, let’s also prune domain API root path URLs ’re recording ’re making shorter file paths:","code":"set_redactor(~ gsub_response(., getOption(\"pivotal.project\"), \"123\")) set_redactor(redact_pivotal) start_capturing() s <- getStories(search = \"mnt\") stop_capturing() s[[1]]$project_id ## [1] \"my-project-name\" with_mock_api({     s <- getStories(search = \"mnt\") }) s[[1]]$project_id ## [1] \"123\" function(response) {   require(magrittr, quietly=TRUE)   response %>%     # Shorten the URL     gsub_response(\"https://www.pivotaltracker.com/services/v5/\", \"\", fixed = TRUE) %>%     # Remove my project ID     gsub_response(getOption(\"pivotal.project\"), \"123\") }"},{"path":"https://enpiar.com/r/httptest/articles/redacting.html","id":"setting-a-package-level-redactor","dir":"Articles","previous_headings":"","what":"Setting a package-level redactor","title":"Redacting and Modifying Recorded Requests","text":"’re writing package wraps API need custom redactor safely record API responses, ’ll want make sure always record redactor. don’t want forget call set_redactor() R session end recording fixtures contain auth secrets. make sure redactor “always ” package, httptest enables define package-level redactor. , put redacting function inst/httptest/redact.R package. (fact, function example inst/httptest/redact.R pivotaltrackR package.) time record requests package loaded, running tests building vignettes, function called response object writing disk. ’s automatic: set never remember.","code":""},{"path":"https://enpiar.com/r/httptest/articles/redacting.html","id":"request-preprocessing","dir":"Articles","previous_headings":"","what":"Request preprocessing","title":"Redacting and Modifying Recorded Requests","text":"Finally, depending long URLs API requests make, may need programmatically shorten ’re planning submitting package CRAN CRAN requires file names 100 characters less. Long file names throw “non-portable file paths” message R CMD check. good way solve problem use request preprocessor: function alters content ‘httr’ request mapping mock file. ’s like redactor request object. Just can provide custom function modify responses recorded, can provide function tweak request made order map request right file mocked context. Importantly, lets truncate URLs, map files. example, API endpoints sit beneath https://language.googleapis.com/v1/, set request preprocessor like: mocked requests look path starting “api/” rather “language.googleapis.com/v1/”, saving (case) 23 characters. can also provide function inst/httptest/request.R, just can redactor, time package loaded ’re reading mock (previously recorded) responses, function called request object mapping file. example, one pivotaltrackR:","code":"set_requester(~ gsub_request(., \"https\\\\://language.googleapis.com/v1/\", \"api/\")) function(request) {   require(magrittr, quietly=TRUE)   request %>%     gsub_request(\"https://www.pivotaltracker.com/services/v5/\", \"\", fixed = TRUE) %>%     gsub_request(getOption(\"pivotal.project\"), \"123\") }"},{"path":"https://enpiar.com/r/httptest/articles/vignettes.html","id":"the-basics-start_vignette","dir":"Articles","previous_headings":"","what":"The basics: start_vignette()","title":"Writing Vignettes with APIs","text":"Getting started easy. beginning R Markdown document, add code chunk: changing vignette-name something meaningful, name .Rmd file. start_vignette() works checking existence directory name provided. directory exists, vignette proceeds making real API requests records responses fixtures inside vignette-name directory (, calls start_capturing()). directory exists, great—’ve previously recorded API responses, uses , loading use_mock_api() mode can use test suite. Curious recording mocking contexts work? See vignettes(\"httptest\") overview; ’s focused testing rather vignettes, mechanics . ’s ! good idea add end_vignette() end document, like turns request recording mocking cleans R session state. ’s necessary build vignette clean R process quit completion (everything cleaned R exits), end_vignette() call good case build documents interactive session. Note code chunks include=FALSE. prevents printed resulting Markdown, HTML, PDF, whatever format document produce. ’re work behind scenes, don’t need shown readers.","code":"`​``{r, include=FALSE} library(httptest) start_vignette(\"vignette-name\") ``` `​``{r, include=FALSE} end_vignette() ```"},{"path":"https://enpiar.com/r/httptest/articles/vignettes.html","id":"handling-server-state-changes","dir":"Articles","previous_headings":"","what":"Handling server state changes","title":"Writing Vignettes with APIs","text":"vignette query API get data , start_vignette() need. actions don’t change state anything server, every time make request (least within current session), get response. Sometimes, though, purpose code alter server state: creating database entry, sending tweet, similar action. Suppose querying Twitter API, first search #rstats hashtag, send tweet hashtag, finally repeat search. ’d expect second search contain tweet just sent. make work, code chunk alter server state, call change_state(): recording, adds new “layer” recorded responses, reading previously recorded responses, changes next layer. working example, see pivotaltrackR vignette. query, creates record server, modifies record, deletes . captured vignette data fully replayable.","code":"`​``{r, include=FALSE} change_state() ```"},{"path":"https://enpiar.com/r/httptest/articles/vignettes.html","id":"advanced-topics","dir":"Articles","previous_headings":"","what":"Advanced topics","title":"Writing Vignettes with APIs","text":"’re recording API responses replay offline, additional considerations. First, ’ll want make sure expose personal credentials private details cached API responses. httptest provides ability “redact” responses record, default, standard authentication methods redacted recorded responses. ’s probable don’t need anything clean responses, ’s worth verifying. Beyond credentials, may attributes API responses want modify, finding--replacing record ids shorter obfuscated value., modify responses, can provide custom redacting function. good way works test suite vignettes put custom function inst/httptest/redact.R package, automatically used whenever package loaded. See redacting vignette(\"redacting\"). Second, depending long URLs API requests make, may need programmatically shorten ’re planning submitting package CRAN requires file names 100 characters less. Just can provide custom function modify responses recorded, can provide function tweak request made order map request right file mocked context. Importantly, lets truncate URLs, map files. , similarly place function inst/httptest/request.R. time package loaded ’re reading mock (previously recorded) responses, function called request object mapping file. don’t want set request/response processors globally tests vignettes, couple options. functions (response redactor request preprocessor) can defined set document’s initial code chunk, using set_redactor set_requester, like : useful ’re writing R Markdown document outside context package. Alternatively, can put vignette-specific setup teardown code package inst/httptest/start-vignette.R inst/httptest/end-vignette.R, respectively, like inst/httptest files, found used whenever package loaded. good option one vignette want share setup code across without copy--paste.","code":"library(httptest) library(magrittr)  api_root <- \"https://www.pivotaltracker.com/services/v5/\" set_redactor(function(response) {   response %>%     redact_headers(\"X-TrackerToken\") %>%     gsub_response(api_root, \"\", fixed = TRUE) %>%     gsub_response(getOption(\"pivotal.project\"), \"123\") }) set_requester(function(request) {   request %>%     gsub_request(api_root, \"\", fixed = TRUE) %>%     gsub_request(getOption(\"pivotal.project\"), \"123\") }) start_vignette(\"stories\")"},{"path":"https://enpiar.com/r/httptest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Neal Richardson. Author, maintainer. Jonathan Keane. Contributor. Maëlle Salmon. Contributor.","code":""},{"path":"https://enpiar.com/r/httptest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Richardson N (2023). httptest: Test Environment HTTP Requests. https://enpiar.com/r/httptest/, https://github.com/nealrichardson/httptest.","code":"@Manual{,   title = {httptest: A Test Environment for HTTP Requests},   author = {Neal Richardson},   year = {2023},   note = {https://enpiar.com/r/httptest/, https://github.com/nealrichardson/httptest}, }"},{"path":"https://enpiar.com/r/httptest/index.html","id":"httptest-a-test-environment-for-http-requests-in-r","dir":"","previous_headings":"","what":"A Test Environment for HTTP Requests","title":"A Test Environment for HTTP Requests","text":"httptest makes easy write tests code packages wrap web APIs. Testing code communicates remote servers can otherwise painful: things like authentication, server state, network flakiness can make testing seem costly bother . httptest package enables test logic R sides API package without requiring access remote service. Importantly, provides multiple contexts mock network connection tools recording real requests future offline use fixtures, tests vignettes. package also includes additional expectations assert HTTP requests ——made. Using tools, can test code making intended requests handles expected responses correctly, without depending connection remote API. ability save responses load offline also enables write package vignettes dynamic documents can distributed without access live server. package bridges gap two others: (1) testthat, provides useful (fun) framework unit testing R doesn’t come tools testing across web APIs; (2) httr, makes working HTTP R easy doesn’t make simple test code uses . httptest brings fun simplicity together.","code":""},{"path":"https://enpiar.com/r/httptest/index.html","id":"installing","dir":"","previous_headings":"","what":"Installing","title":"A Test Environment for HTTP Requests","text":"httptest can installed CRAN pre-release version package can pulled GitHub using remotes package:","code":"install.packages(\"httptest\") # install.packages(\"remotes\") remotes::install_github(\"nealrichardson/httptest\")"},{"path":"https://enpiar.com/r/httptest/index.html","id":"using","dir":"","previous_headings":"","what":"Using","title":"A Test Environment for HTTP Requests","text":"start using httptest package, run use_httptest() root package directory. add httptest “Suggests” DESCRIPTION file add library(httptest) tests/testthat/setup.R, testthat loads running tests , ’re ready start using tools httptest provides. ’s overview get started. longer discussion examples, see vignette(\"httptest\"), check vignette(\"faq\") common questions. See also package reference list test contexts expectations provided package.","code":""},{"path":"https://enpiar.com/r/httptest/index.html","id":"in-your-test-suite","dir":"","previous_headings":"Using","what":"In your test suite","title":"A Test Environment for HTTP Requests","text":"package includes several contexts, wrap around test code otherwise make network requests httr. intercept requests prevent actual network traffic occurring. with_mock_api() maps requests—URLs along request bodies query parameters—file paths. file exists, contents returned response object, API server returned . allows test complex R code makes requests something response, simulating API respond specific requests. Requests corresponding fixture file raise errors print request method, URL, body payload, provided. expect_GET(), expect_POST(), rest HTTP-request-method expectations look errors check requests match expectations. useful asserting function call make correctly-formed HTTP request without need generate mock, well asserting function make request (, raise error context). Adding with_mock_api() tests straightforward. Given basic test makes network requests: wrap code with_mock_api(), actual requests won’t happen. requests now raise errors unless either (1) wrap expect_GET() assert expect requests happen, (2) supply mocks file paths match requests. might get mocks documentation API ’re using, record —httptest provides tools recording. Another context, capture_requests(), collects responses requests make stores mock files. enables perform series requests live server build test suite using mocks, running tests with_mock_api. example, running : make actual requests network store responses with_mock_api() find . convenience, may find easier interactive session call start_capturing(), make requests, stop_capturing() ’re done, : Mocks stored capture_requests written plain-text files. storing fixtures human-readable files, can easily confirm mocks look correct, can easily maintain API changes subtly without re-record (though easy enough delete recapture). Text files also play well version control systems, git. recording requests, httptest redacts standard ways auth credentials passed, won’t accidentally publish personal tokens. redacting behavior fully customizable: can programmatically sanitize alter parts request response. See vignette(\"redacting\") details.","code":"test_that(\"Requests happen\", {   expect_s3_class(GET(\"http://httpbin.org/get\"), \"response\")   expect_s3_class(     GET(\"http://httpbin.org/response-headers\",       query = list(`Content-Type` = \"application/json\")),     \"response\"   ) }) with_mock_api({   test_that(\"Requests happen\", {     expect_s3_class(GET(\"http://httpbin.org/get\"), \"response\")     expect_s3_class(       GET(\"http://httpbin.org/response-headers\",         query = list(`Content-Type` = \"application/json\")),       \"response\"     )   }) }) capture_requests({   GET(\"http://httpbin.org/get\")   GET(\"http://httpbin.org/response-headers\",     query = list(`Content-Type` = \"application/json\")) }) start_capturing() GET(\"http://httpbin.org/get\") GET(\"http://httpbin.org/response-headers\",   query = list(`Content-Type` = \"application/json\")) stop_capturing()"},{"path":"https://enpiar.com/r/httptest/index.html","id":"in-your-vignettes","dir":"","previous_headings":"Using","what":"In your vignettes","title":"A Test Environment for HTTP Requests","text":"Package vignettes valuable way show use code, communicating remote API, difficult write useful vignettes. httptest, however, adding little one line code vignette, can safely record API responses live session, using secret credentials. API responses scrubbed sensitive personal information stored subfolder vignettes directory. Subsequent vignette builds, including continuous-integration services, CRAN, package users’ computers, use recorded responses, allowing document regenerate without network connection API credentials. record fresh API responses, delete subfolder cached responses re-run. use httptest vignettes, add code chunk start_vignette() beginning, many use cases, ’s thing need. need handle changes server state, make API request creates record server, add call change_state(). See vignette(\"vignettes\") discussion links examples.","code":""},{"path":"https://enpiar.com/r/httptest/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A Test Environment for HTTP Requests","text":"Suggestions pull requests welcome!","code":""},{"path":"https://enpiar.com/r/httptest/index.html","id":"for-developers","dir":"","previous_headings":"","what":"For developers","title":"A Test Environment for HTTP Requests","text":"repository includes Makefile facilitate common tasks command line, ’re sort thing.","code":""},{"path":"https://enpiar.com/r/httptest/index.html","id":"running-tests","dir":"","previous_headings":"For developers","what":"Running tests","title":"A Test Environment for HTTP Requests","text":"$ make test. can also specify specific test file files run adding “file=” argument, like $ make test file=offline. test_package regular-expression pattern match within file names. See documentation testthat package.","code":""},{"path":"https://enpiar.com/r/httptest/index.html","id":"updating-documentation","dir":"","previous_headings":"For developers","what":"Updating documentation","title":"A Test Environment for HTTP Requests","text":"$ make doc. Requires roxygen2 package.","code":""},{"path":"https://enpiar.com/r/httptest/reference/as-redactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a redacting expression as a proper function — as.redactor","title":"Wrap a redacting expression as a proper function — as.redactor","text":"Redactors take response first argument, take additional arguments: redact_headers(), example, requires specify headers. function allows take simplified expression via formula, similar purrr , can provide function capture_requests().","code":""},{"path":"https://enpiar.com/r/httptest/reference/as-redactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a redacting expression as a proper function — as.redactor","text":"","code":"as.redactor(fmla)"},{"path":"https://enpiar.com/r/httptest/reference/as-redactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a redacting expression as a proper function — as.redactor","text":"expr Partial expression turn function response","code":""},{"path":"https://enpiar.com/r/httptest/reference/as-redactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap a redacting expression as a proper function — as.redactor","text":"function.","code":""},{"path":"https://enpiar.com/r/httptest/reference/as-redactor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrap a redacting expression as a proper function — as.redactor","text":"example, .redactor(~ redact_headers(., \"X-Custom-Header\")) equivalent function (response) redact_headers(response, \"X-Custom-Header\"). allows set_redactor(~ redact_headers(., \"X-Custom-Header\")).","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/block_requests.html","id":null,"dir":"Reference","previous_headings":"","what":"Block HTTP requests — block_requests","title":"Block HTTP requests — block_requests","text":"function intercepts HTTP requests made httr raises informative error instead. without_internet() , minus automatic disabling mocking context finishes.","code":""},{"path":"https://enpiar.com/r/httptest/reference/block_requests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block HTTP requests — block_requests","text":"","code":"block_requests()"},{"path":"https://enpiar.com/r/httptest/reference/block_requests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block HTTP requests — block_requests","text":"Nothing; called side effects.","code":""},{"path":"https://enpiar.com/r/httptest/reference/block_requests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Block HTTP requests — block_requests","text":"Note order resume normal request behavior, need call stop_mocking() ---function clean 'without_internet` .","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/build_mock_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a request to a mock file path — build_mock_url","title":"Convert a request to a mock file path — build_mock_url","text":"Requests translated mock file paths according several rules incorporate request method, URL, query parameters, body.","code":""},{"path":"https://enpiar.com/r/httptest/reference/build_mock_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a request to a mock file path — build_mock_url","text":"","code":"build_mock_url(req, method = \"GET\")"},{"path":"https://enpiar.com/r/httptest/reference/build_mock_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a request to a mock file path — build_mock_url","text":"req request object, character \"URL\" convert method character HTTP method. req 'request' object, request method override argument","code":""},{"path":"https://enpiar.com/r/httptest/reference/build_mock_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a request to a mock file path — build_mock_url","text":"file path name, without extension. file, file extension appended, may may exist: existence concern function.","code":""},{"path":"https://enpiar.com/r/httptest/reference/build_mock_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a request to a mock file path — build_mock_url","text":"First, request protocol, \"https://\", removed URL. Second, request URL contains query string, popped , hashed digest::digest(), first six characters appended file read. Third, request bodies similarly hashed appended. Finally, request method GET used appended end end file name. Mock file paths also file extension appended, based Content-Type response, though function, concerned request, add extension. HTTP API, \"directory\" resource, extension allows distinguishing directories files file system. , mocked GET(\"http://example.com/api/\") may read \"example.com/api.json\" file, GET(\"http://example.com/api/object1/\") reads \"example.com/api/object1.json\". examples: GET(\"http://example.com/api/object1/?=1\") may read \"example.com/api/object1-b64371.xml\". POST(\"http://example.com/api/object1/?=1\") may read \"example.com/api/object1-b64371-POST.json\". function exported packages can construct similar mock behaviors override specific requests higher level with_mock_api mocks. Note trying guess mock file paths corresponding test intend create mock file manually, instead trying build URL, run test with_mock_api error message contain mock file path.","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/capture_requests.html","id":null,"dir":"Reference","previous_headings":"","what":"Record API responses as mock files — capture_requests","title":"Record API responses as mock files — capture_requests","text":"capture_requests context collects responses requests make stores mock files. enables perform series requests live server build test suite using mocks, running tests with_mock_api().","code":""},{"path":"https://enpiar.com/r/httptest/reference/capture_requests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record API responses as mock files — capture_requests","text":"","code":"capture_requests(expr, path, ...)  start_capturing(path = NULL, simplify = TRUE)  stop_capturing()"},{"path":"https://enpiar.com/r/httptest/reference/capture_requests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record API responses as mock files — capture_requests","text":"expr Code run inside context path save mock files. Default first directory .mockPaths(), otherwise specified current working directory. generally better call .mockPaths() directly want write different path, rather using path argument. ... Arguments passed capture_requests start_capturing simplify logical: TRUE (default), JSON responses status 200 written just text response body. cases, simplify FALSE, \"response\" object written .R file using base::dput().","code":""},{"path":"https://enpiar.com/r/httptest/reference/capture_requests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record API responses as mock files — capture_requests","text":"capture_requests returns result expr. start_capturing invisibly returns path given. stop_capturing returns nothing; called side effects.","code":""},{"path":"https://enpiar.com/r/httptest/reference/capture_requests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Record API responses as mock files — capture_requests","text":"start_capturing stop_capturing allow turn /request recording convenient use interactive session. Recorded responses written plain-text files. storing fixtures plain-text files, can easily confirm mocks look correct, can easily maintain without re-record . API changes subtly, adding additional attribute object, can just touch mocks. response status 200 OK Content-Type maps supported file extension---currently .json, .html, .xml, .txt, .csv, .tsv---just response body written , using appropriate extension. 204 Content status responses stored empty file extension .204. Otherwise, response written .R file containing syntax , executed, recreates httr \"response\" object. trouble recording responses, unsure files written, set options(httptest.verbose=TRUE) print message every file written containing absolute path file.","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/capture_requests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Record API responses as mock files — capture_requests","text":"","code":"if (FALSE) { capture_requests({   GET(\"http://httpbin.org/get\")   GET(\"http://httpbin.org\")   GET(\"http://httpbin.org/response-headers\",     query = list(`Content-Type` = \"application/json\")   ) }) # Or: start_capturing() GET(\"http://httpbin.org/get\") GET(\"http://httpbin.org\") GET(\"http://httpbin.org/response-headers\",   query = list(`Content-Type` = \"application/json\") ) stop_capturing() }"},{"path":"https://enpiar.com/r/httptest/reference/change_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle a change of server state — change_state","title":"Handle a change of server state — change_state","text":"vignette, put call change_state() code block makes change server, rather, code block might repeat request previously done expect different result.","code":""},{"path":"https://enpiar.com/r/httptest/reference/change_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle a change of server state — change_state","text":"","code":"change_state()"},{"path":"https://enpiar.com/r/httptest/reference/change_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle a change of server state — change_state","text":"Invisibly, return .mockPaths() new path added.","code":""},{"path":"https://enpiar.com/r/httptest/reference/change_state.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle a change of server state — change_state","text":"change_state() works layering new directory top existing .mockPaths(), fixtures recorded/loaded , masking rather overwriting previously recorded responses request. vignettes, mock layers subdirectories integer names.","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Test that an HTTP request is made with a header — expect_header","title":"Test that an HTTP request is made with a header — expect_header","text":"expectation checks HTTP header (potentially header value) present request. works inspecting request object raising warnings caught testthat::expect_warning().","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test that an HTTP request is made with a header — expect_header","text":"","code":"expect_header(..., ignore.case = TRUE)"},{"path":"https://enpiar.com/r/httptest/reference/expect_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test that an HTTP request is made with a header — expect_header","text":"... Arguments passed expect_warning ignore.case logical: FALSE, pattern matching case sensitive TRUE, case ignored matching. Default TRUE; note opposite expect_warning appropriate HTTP header names case insensitive.","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test that an HTTP request is made with a header — expect_header","text":"NULL, according expect_warning.","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_header.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test that an HTTP request is made with a header — expect_header","text":"expect_header works mock HTTP contexts \"live\" HTTP requests.","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test that an HTTP request is made with a header — expect_header","text":"","code":"library(httr) with_fake_http({   expect_header(     GET(\"http://example.com\", config = add_headers(Accept = \"image/png\")),     \"Accept: image/png\"   ) }) #> GET http://example.com #> <simpleWarning: Accept: image/png>"},{"path":"https://enpiar.com/r/httptest/reference/expect_json_equivalent.html","id":null,"dir":"Reference","previous_headings":"","what":"Test that objects would generate equivalent JSON — expect_json_equivalent","title":"Test that objects would generate equivalent JSON — expect_json_equivalent","text":"Named lists R ordered, translate unordered objects JSON. test expectation loosens equality check two objects ignore order elements named list.","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_json_equivalent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test that objects would generate equivalent JSON — expect_json_equivalent","text":"","code":"expect_json_equivalent(   object,   expected,   info = NULL,   label = \"object\",   expected.label = \"expected\" )"},{"path":"https://enpiar.com/r/httptest/reference/expect_json_equivalent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test that objects would generate equivalent JSON — expect_json_equivalent","text":"object object test expected expected value info extra information included message label character name refer object test result. tools deparsing object names 'testthat' uses exported package, default just \"object\". expected.label character label expected","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_json_equivalent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test that objects would generate equivalent JSON — expect_json_equivalent","text":"Invisibly, returns object optionally passing expectations.","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/expect_verb.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectations for mocked HTTP requests — expect_verb","title":"Expectations for mocked HTTP requests — expect_verb","text":"mock contexts httptest can raise errors messages requests made, (error) messages three elements, separated space: (1) request method (e.g. \"GET\"); (2) request URL; (3) request body, present. verb-expectation functions look message shape. expect_PUT, instance, looks request message starts \"PUT\". means expect_verb functions work outside mock context, error raised making request. Thus, expect_verb function wrapped inside mocking function like without_internet(), shown examples.","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_verb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expectations for mocked HTTP requests — expect_verb","text":"","code":"expect_GET(object, url = \"\", ...)  expect_POST(object, url = \"\", ...)  expect_PATCH(object, url = \"\", ...)  expect_PUT(object, url = \"\", ...)  expect_DELETE(object, url = \"\", ...)  expect_no_request(object, ...)"},{"path":"https://enpiar.com/r/httptest/reference/expect_verb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectations for mocked HTTP requests — expect_verb","text":"object Code execute may cause HTTP request url character: URL expect request made . Default empty string, meaning can just assert request made certain method without asserting anything . ... character segments request payload expect included request body, joined together paste0. may also pass following named logical arguments, passed base::grepl(): fixed: matching take pattern treat regular expression. Default: TRUE, note default opposite default grepl. (rest arguments follow defaults.) ignore.case: matching done case insensitively? Default: FALSE, meaning matches case sensitive. perl: Perl-compatible regular expressions used? Default: FALSE useBytes: matching done byte--byte rather character--character? Default: FALSE","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_verb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectations for mocked HTTP requests — expect_verb","text":"testthat 'expectation'.","code":""},{"path":"https://enpiar.com/r/httptest/reference/expect_verb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectations for mocked HTTP requests — expect_verb","text":"","code":"library(httr) # without_internet provides required mock context for expectations without_internet({   expect_GET(     GET(\"http://httpbin.org/get\"),     \"http://httpbin.org/get\"   )   expect_GET(GET(\"http://httpbin.org/get\"),     \"http://httpbin.org/[a-z]+\",     fixed = FALSE   ) # For regular expression matching   expect_PUT(     PUT(\"http://httpbin.org/put\", body = '{\"a\":1}'),     \"http://httpbin.org/put\",     '{\"a\":1}'   )   expect_PUT(PUT(\"http://httpbin.org/put\", body = '{\"a\":1}'))   expect_no_request(rnorm(5)) }) #> [1] -0.03839323  0.77498412 -1.83949709 -0.48727283  0.17618216"},{"path":"https://enpiar.com/r/httptest/reference/fake_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Return something that looks like a 'response' — fake_response","title":"Return something that looks like a 'response' — fake_response","text":"functions allow mocking HTTP requests without requiring internet connection server run . return shape 'httr' \"response\" class object behave like real response generated real request.","code":""},{"path":"https://enpiar.com/r/httptest/reference/fake_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return something that looks like a 'response' — fake_response","text":"","code":"fake_response(   request,   verb = \"GET\",   status_code = 200,   headers = list(),   content = NULL )"},{"path":"https://enpiar.com/r/httptest/reference/fake_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return something that looks like a 'response' — fake_response","text":"request 'httr' request-class object. character URL also accepted, fake request object created, using verb argument well. verb Character name HTTP verb, request URL. Default \"GET\". status_code Integer HTTP response status headers Optional list additional response headers return content supplied, JSON-serializable list returned response content Content-Type: application/json. content provided, status_code 204 Content, url set response content Content-Type: text/plain.","code":""},{"path":"https://enpiar.com/r/httptest/reference/fake_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return something that looks like a 'response' — fake_response","text":"'httr' response class object.","code":""},{"path":"https://enpiar.com/r/httptest/reference/find_mock_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Go through mock paths to find the local mock file location — find_mock_file","title":"Go through mock paths to find the local mock file location — find_mock_file","text":"Go mock paths find local mock file location","code":""},{"path":"https://enpiar.com/r/httptest/reference/find_mock_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Go through mock paths to find the local mock file location — find_mock_file","text":"","code":"find_mock_file(file)"},{"path":"https://enpiar.com/r/httptest/reference/find_mock_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Go through mock paths to find the local mock file location — find_mock_file","text":"file file path, generated build_mock_url().","code":""},{"path":"https://enpiar.com/r/httptest/reference/find_mock_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Go through mock paths to find the local mock file location — find_mock_file","text":"path file exists, NULL none found.","code":""},{"path":"https://enpiar.com/r/httptest/reference/get_current_redactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch the active redacting function — get_current_redactor","title":"Fetch the active redacting function — get_current_redactor","text":"Called inside capture_requests(). using default redactor, checks time called see new packages attached, case package redactors .","code":""},{"path":"https://enpiar.com/r/httptest/reference/get_current_redactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch the active redacting function — get_current_redactor","text":"","code":"get_current_redactor()"},{"path":"https://enpiar.com/r/httptest/reference/get_current_redactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch the active redacting function — get_current_redactor","text":"redacting function.","code":""},{"path":"https://enpiar.com/r/httptest/reference/get_current_requester.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch the active requesting function — get_current_requester","title":"Fetch the active requesting function — get_current_requester","text":"Called inside capture_requests(). using default requester, checks time called see new packages attached, case package requesters .","code":""},{"path":"https://enpiar.com/r/httptest/reference/get_current_requester.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch the active requesting function — get_current_requester","text":"","code":"get_current_requester()"},{"path":"https://enpiar.com/r/httptest/reference/get_current_requester.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch the active requesting function — get_current_requester","text":"requesting function.","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/gsub_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and replace within a 'response' or 'request' — gsub_response","title":"Find and replace within a 'response' or 'request' — gsub_response","text":"functions pass arguments base::gsub() order find replace string patterns (regular expressions) within request response objects. gsub_request() replaces request URL request body fields; gsub_response() replaces response URL, response body, calls gsub_request() request object found within response.","code":""},{"path":"https://enpiar.com/r/httptest/reference/gsub_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and replace within a 'response' or 'request' — gsub_response","text":"","code":"gsub_response(response, pattern, replacement, ...)  gsub_request(request, pattern, replacement, ...)"},{"path":"https://enpiar.com/r/httptest/reference/gsub_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and replace within a 'response' or 'request' — gsub_response","text":"response 'httr' response object sanitize. pattern base::gsub(): \"character string containing regular expression (character string fixed = TRUE) matched given character vector.\" Passed gsub(). See docs gsub() details. replacement replacement matched pattern, possibly including regular expression backreferences. Passed gsub(). See docs gsub() details. ... Additional logical arguments passed gsub(): ignore.case, perl, fixed, useBytes possible options. request 'httr' request object sanitize.","code":""},{"path":"https://enpiar.com/r/httptest/reference/gsub_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find and replace within a 'response' or 'request' — gsub_response","text":"request response object, passed , pattern replaced URLs bodies.","code":""},{"path":"https://enpiar.com/r/httptest/reference/gsub_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find and replace within a 'response' or 'request' — gsub_response","text":"Note , unlike gsub(), first argument function request response, pattern, equivalent argument gsub(), \"x\", placed third. difference maintain consistency redactor functions httptest, take response first argument.","code":""},{"path":"https://enpiar.com/r/httptest/reference/httptest.html","id":null,"dir":"Reference","previous_headings":"","what":"httptest: A Test Environment for HTTP Requests — httptest","title":"httptest: A Test Environment for HTTP Requests — httptest","text":"httr makes HTTP easy testthat makes testing fun, httptest makes testing code uses HTTP simple pleasure.","code":""},{"path":"https://enpiar.com/r/httptest/reference/httptest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"httptest: A Test Environment for HTTP Requests — httptest","text":"httptest package lets test R code wraps API without requiring access remote service. provides three test contexts mock network connection different ways. with_mock_api() lets provide custom fixtures responses requests, stored plain-text files test directory. without_internet() converts HTTP requests errors print request method, URL, body payload, provided, allowing assert function call make correctly-formed HTTP request assert function make request (, raise error context). with_fake_http() raises \"message\" instead \"error\", HTTP requests return \"response\"-class object. Like without_internet, allows assert correct requests () made, cause code exit error. httptest offers additional expectations assert HTTP requests ------made. expect_GET(), expect_PUT(), expect_PATCH(), expect_POST(), expect_DELETE() assert specified HTTP request made within one test contexts. catch error message raised mocked HTTP service check request URL optional body match expectation. expect_no_request() inverse : asserts error message mocked HTTP service raised. expect_header() asserts HTTP request, mocked , contains request header. expect_json_equivalent() checks two R objects generate equivalent JSON, taking account JSON objects unordered whereas R named lists ordered. overview testing httptest, see vignette(\"httptest\"). package also includes capture_requests(), context collects responses requests make stores mock files. enables perform series requests live server build test suite using mocks, running tests with_mock_api. recording requests, default httptest looks redacts standard ways auth credentials passed requests. prevents accidentally publishing personal tokens. redacting behavior fully customizable, either providing function (response) {...} set_redactor(), placing function package's inst/httptest/redact.R used automatically time record requests package loaded. See vignette(\"redacting\") details. httptest also enables write package vignettes R Markdown documents communicate remote API. adding little start_vignette() beginning vignette, can safely record API responses live session, using secret credentials. API responses scrubbed sensitive personal information stored subfolder vignettes directory. Subsequent vignette builds, including continuous-integration services, CRAN, package users' computers, use recorded responses, allowing document regenerate without network connection API credentials. record fresh API responses, delete subfolder cached responses re-run. See vignette(\"vignettes\") discussion links examples.","code":""},{"path":"https://enpiar.com/r/httptest/reference/mockPaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Set an alternate directory for mock API fixtures — .mockPaths","title":"Set an alternate directory for mock API fixtures — .mockPaths","text":"default, with_mock_api look mocks relative current working directory (test directory). want look places, can call .mockPaths add directories search path.","code":""},{"path":"https://enpiar.com/r/httptest/reference/mockPaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set an alternate directory for mock API fixtures — .mockPaths","text":"","code":".mockPaths(new)"},{"path":"https://enpiar.com/r/httptest/reference/mockPaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set an alternate directory for mock API fixtures — .mockPaths","text":"new Either character vector path(s) add, NULL reset default.","code":""},{"path":"https://enpiar.com/r/httptest/reference/mockPaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set an alternate directory for mock API fixtures — .mockPaths","text":"new omitted, function returns current search paths, character vector. new provided, updated value returned invisibly.","code":""},{"path":"https://enpiar.com/r/httptest/reference/mockPaths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set an alternate directory for mock API fixtures — .mockPaths","text":"works like base::.libPaths(): directories specify added list searched first. default directory searched last. unique values kept: provide path already found .mockPaths, result effectively moves path first position. finer-grained control, completely override default behavior searching current working directory, can set option \"httptest.mock.paths\" directly.","code":""},{"path":"https://enpiar.com/r/httptest/reference/mockPaths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set an alternate directory for mock API fixtures — .mockPaths","text":"","code":"identical(.mockPaths(), \".\") #> [1] TRUE .mockPaths(\"/var/somewhere/else\") identical(.mockPaths(), c(\"/var/somewhere/else\", \".\")) #> [1] TRUE .mockPaths(NULL) identical(.mockPaths(), \".\") #> [1] TRUE"},{"path":"https://enpiar.com/r/httptest/reference/public.html","id":null,"dir":"Reference","previous_headings":"","what":"Test that functions are exported — public","title":"Test that functions are exported — public","text":"easy forget document export new function. Using testthat test suite makes even easier forget evaluates test code inside package's namespace, internal, non-exported functions can accessed. might write new function, get passing tests, tell package users function, try run , get Error: object 'coolNewFunction' found.","code":""},{"path":"https://enpiar.com/r/httptest/reference/public.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test that functions are exported — public","text":"","code":"public(...)"},{"path":"https://enpiar.com/r/httptest/reference/public.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test that functions are exported — public","text":"... Code evaluate","code":""},{"path":"https://enpiar.com/r/httptest/reference/public.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test that functions are exported — public","text":"result ... evaluated global environment (package environment).","code":""},{"path":"https://enpiar.com/r/httptest/reference/public.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test that functions are exported — public","text":"Wrap public() around test blocks assert functions call exported (thus fail documented @export otherwise added package NAMESPACE file). alternative way test functions exported package namespace examples documentation, R CMD check runs global namespace thus fail functions exported. However, code calls remote APIs, potentially requiring specific server state authentication, may viable run examples R CMD check. public() provides solution works cases can test namespace exports place testing code API mocks safe testing contexts.","code":""},{"path":"https://enpiar.com/r/httptest/reference/redact.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove sensitive content from HTTP responses — redact_cookies","title":"Remove sensitive content from HTTP responses — redact_cookies","text":"recording requests use test fixtures, want include secrets like authentication tokens personal ids. functions provide means redacting kind content, anything want, responses capture_requests() saves.","code":""},{"path":"https://enpiar.com/r/httptest/reference/redact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove sensitive content from HTTP responses — redact_cookies","text":"","code":"redact_cookies(response)  redact_headers(response, headers = c())  within_body_text(response, FUN)  redact_auth(response)"},{"path":"https://enpiar.com/r/httptest/reference/redact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove sensitive content from HTTP responses — redact_cookies","text":"response 'httr' response object sanitize. headers redact_headers(), character vector header names sanitize. Note redact_headers() redacting returns function called redacting. FUN within_body_text(), function takes argument character vector returns modified version . function applied text response's \"content\".","code":""},{"path":"https://enpiar.com/r/httptest/reference/redact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove sensitive content from HTTP responses — redact_cookies","text":"redacting functions return well-formed 'httr' response object.","code":""},{"path":"https://enpiar.com/r/httptest/reference/redact.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove sensitive content from HTTP responses — redact_cookies","text":"redact_cookies() removes cookies 'httr' response objects. redact_headers() lets target selected request response headers redaction. redact_auth() convenience wrapper around useful default redactor capture_requests(). within_body_text() lets manipulate text response body manages parsing raw (binary) data 'response' object.","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/save_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Write out a captured response — save_response","title":"Write out a captured response — save_response","text":"Write captured response","code":""},{"path":"https://enpiar.com/r/httptest/reference/save_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write out a captured response — save_response","text":"","code":"save_response(response, simplify = TRUE)"},{"path":"https://enpiar.com/r/httptest/reference/save_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write out a captured response — save_response","text":"response 'httr' response object simplify logical: TRUE (default), JSON responses status 200 supported Content-Type written just text response body. cases, simplify FALSE, \"response\" object written .R file using base::dput().","code":""},{"path":"https://enpiar.com/r/httptest/reference/save_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write out a captured response — save_response","text":"character file name written ","code":""},{"path":"https://enpiar.com/r/httptest/reference/set_redactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a response redactor — set_redactor","title":"Set a response redactor — set_redactor","text":"redactor function alters response content written capture_requests() context, allowing remove sensitive values, authentication tokens, well modification truncation response body. default, redact_auth() function used purge standard auth methods, set_redactor() allows provide different one.","code":""},{"path":"https://enpiar.com/r/httptest/reference/set_redactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a response redactor — set_redactor","text":"","code":"set_redactor(FUN)"},{"path":"https://enpiar.com/r/httptest/reference/set_redactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a response redactor — set_redactor","text":"FUN function expression modifies response objects. Specifically, valid input one : function taking single argument, response, returning valid response object. formula shorthand anonymous function . \"response\" argument, purrr package. , instead function (response) redact_headers(response, \"X-Custom-Header\"), can use ~ redact_headers(., \"X-Custom-Header\") list redacting functions/formulas, executed sequence response NULL, override default redact_auth().","code":""},{"path":"https://enpiar.com/r/httptest/reference/set_redactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a response redactor — set_redactor","text":"Invisibly, redacting function, validated perhaps modified. Formulas function lists turned proper functions. NULL input returns force() function.","code":""},{"path":"https://enpiar.com/r/httptest/reference/set_redactor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set a response redactor — set_redactor","text":"Alternatively, can put redacting function inst/httptest/redact.R package, time package loaded (running tests building vignettes), function used automatically. details redact responses, see vignette(\"redacting\").","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/set_requester.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a request preprocessor — set_requester","title":"Set a request preprocessor — set_requester","text":"Set request preprocessor","code":""},{"path":"https://enpiar.com/r/httptest/reference/set_requester.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a request preprocessor — set_requester","text":"","code":"set_requester(FUN)"},{"path":"https://enpiar.com/r/httptest/reference/set_requester.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a request preprocessor — set_requester","text":"FUN function expression modifies request objects. Specifically, valid input one : function taking single argument, request, returning valid request object. formula shorthand anonymous function . \"request\" argument, purrr package. list functions/formulas, executed sequence request. NULL, override default redact_auth().","code":""},{"path":"https://enpiar.com/r/httptest/reference/set_requester.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a request preprocessor — set_requester","text":"Invisibly, FUN, validated perhaps modified.","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/skip_if_disconnected.html","id":null,"dir":"Reference","previous_headings":"","what":"Skip tests that need an internet connection if you don't have one — skip_if_disconnected","title":"Skip tests that need an internet connection if you don't have one — skip_if_disconnected","text":"Temporary connection trouble fail build.","code":""},{"path":"https://enpiar.com/r/httptest/reference/skip_if_disconnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skip tests that need an internet connection if you don't have one — skip_if_disconnected","text":"","code":"skip_if_disconnected(   message = paste(\"Offline: cannot reach\", url),   url = \"http://httpbin.org/\" )"},{"path":"https://enpiar.com/r/httptest/reference/skip_if_disconnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skip tests that need an internet connection if you don't have one — skip_if_disconnected","text":"message character message printed, passed testthat::skip() url character URL ping check working connection","code":""},{"path":"https://enpiar.com/r/httptest/reference/skip_if_disconnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skip tests that need an internet connection if you don't have one — skip_if_disconnected","text":"offline, test skip; else invisibly returns TRUE.","code":""},{"path":"https://enpiar.com/r/httptest/reference/skip_if_disconnected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skip tests that need an internet connection if you don't have one — skip_if_disconnected","text":"Note call inside one mock contexts, follow mock's behavior. , inside with_fake_http(), check pass following tests run, inside without_internet(), following tests skipped.","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/start_vignette.html","id":null,"dir":"Reference","previous_headings":"","what":"Set mocking/capturing state for a vignette — start_vignette","title":"Set mocking/capturing state for a vignette — start_vignette","text":"Use start_vignette() either use previously recorded responses, exist, capture real responses future use.","code":""},{"path":"https://enpiar.com/r/httptest/reference/start_vignette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set mocking/capturing state for a vignette — start_vignette","text":"","code":"start_vignette(path, ...)  end_vignette()"},{"path":"https://enpiar.com/r/httptest/reference/start_vignette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set mocking/capturing state for a vignette — start_vignette","text":"path Root file path mocks vignette. good idea use file name vignette . ... Optional arguments passed start_capturing()","code":""},{"path":"https://enpiar.com/r/httptest/reference/start_vignette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set mocking/capturing state for a vignette — start_vignette","text":"Nothing; called side effect starting/ending response recording mocking.","code":""},{"path":"https://enpiar.com/r/httptest/reference/start_vignette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set mocking/capturing state for a vignette — start_vignette","text":"vignette R Markdown Sweave document, place start_vignette() R code block beginning, first API request made, put end_vignette() R code chunk end. may want make R code chunks echo=FALSE order hide fact calling . behavior changes based existence path directory. first time build vignette, directory exist yet, make real requests record inside path. subsequent runs, mocks used. record fresh responses server, delete path directory, responses recorded next time vignette runs. additional setup code like available across package's vignettes, put inst/httptest/start-vignette.R package, called start_vignette() mock/record context set. Similarly, teardown code can go inst/httptest/end-vignette.R, evaluated end_vignette() mocking stopped.","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/stop_mocking.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn off request mocking — stop_mocking","title":"Turn off request mocking — stop_mocking","text":"function \"untraces\" httr request functions normal, real requesting behavior can resumed.","code":""},{"path":"https://enpiar.com/r/httptest/reference/stop_mocking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn off request mocking — stop_mocking","text":"","code":"stop_mocking()"},{"path":"https://enpiar.com/r/httptest/reference/stop_mocking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn off request mocking — stop_mocking","text":"Nothing; called side effects","code":""},{"path":"https://enpiar.com/r/httptest/reference/use_httptest.html","id":null,"dir":"Reference","previous_headings":"","what":"Use 'httptest' in your tests — use_httptest","title":"Use 'httptest' in your tests — use_httptest","text":"function adds httptest Suggests package DESCRIPTION loads tests/testthat/setup.R. Call setting new package test suite.","code":""},{"path":"https://enpiar.com/r/httptest/reference/use_httptest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use 'httptest' in your tests — use_httptest","text":"","code":"use_httptest(path = \".\")"},{"path":"https://enpiar.com/r/httptest/reference/use_httptest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use 'httptest' in your tests — use_httptest","text":"path character path package","code":""},{"path":"https://enpiar.com/r/httptest/reference/use_httptest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use 'httptest' in your tests — use_httptest","text":"Nothing: called file system side effects.","code":""},{"path":"https://enpiar.com/r/httptest/reference/use_httptest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use 'httptest' in your tests — use_httptest","text":"function idempotent: httptest already added files, additional changes made.","code":""},{"path":"https://enpiar.com/r/httptest/reference/use_mock_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn on API mocking — use_mock_api","title":"Turn on API mocking — use_mock_api","text":"function intercepts HTTP requests made httr serves mock file responses instead. with_mock_api() , minus automatic disabling mocking context finishes.","code":""},{"path":"https://enpiar.com/r/httptest/reference/use_mock_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn on API mocking — use_mock_api","text":"","code":"use_mock_api()"},{"path":"https://enpiar.com/r/httptest/reference/use_mock_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn on API mocking — use_mock_api","text":"Nothing; called side effects.","code":""},{"path":"https://enpiar.com/r/httptest/reference/use_mock_api.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn on API mocking — use_mock_api","text":"Note order resume normal request behavior, need call stop_mocking() ---function clean 'with_mock_api` .","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/with_fake_http.html","id":null,"dir":"Reference","previous_headings":"","what":"Make all HTTP requests return a fake response — with_fake_http","title":"Make all HTTP requests return a fake response — with_fake_http","text":"context, HTTP verb functions raise 'message' test code can assert requests made. without_internet(), message raised well-defined shape, made three elements, separated space: (1) request method (e.g. \"GET\" \"POST\"); (2) request URL; (3) request body, present. verb-expectation functions, expect_GET expect_POST, look shape.","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_fake_http.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make all HTTP requests return a fake response — with_fake_http","text":"","code":"with_fake_http(expr)"},{"path":"https://enpiar.com/r/httptest/reference/with_fake_http.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make all HTTP requests return a fake response — with_fake_http","text":"expr Code run inside fake context","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_fake_http.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make all HTTP requests return a fake response — with_fake_http","text":"result expr","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_fake_http.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make all HTTP requests return a fake response — with_fake_http","text":"Unlike without_internet, HTTP functions error halt execution, instead returning response-class object code calling HTTP functions can proceed response handling logic tested. response returns echoes back request , similar endpoints http://httpbin.org .","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_fake_http.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make all HTTP requests return a fake response — with_fake_http","text":"","code":"with_fake_http({   expect_GET(req1 <- httr::GET(\"http://example.com\"), \"http://example.com\")   req1$url   expect_POST(     req2 <- httr::POST(\"http://example.com\", body = '{\"a\":1}'),     \"http://example.com\"   )   httr::content(req2) }) #> $a #> [1] 1 #>"},{"path":"https://enpiar.com/r/httptest/reference/with_mock_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Serve a mock API from files — with_mock_api","title":"Serve a mock API from files — with_mock_api","text":"context, HTTP requests attempt load API response fixtures files. allows test code proceed evaluating code expects HTTP requests return meaningful responses. Requests corresponding fixture file raise errors, like without_internet() .","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_mock_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serve a mock API from files — with_mock_api","text":"","code":"with_mock_api(expr)"},{"path":"https://enpiar.com/r/httptest/reference/with_mock_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serve a mock API from files — with_mock_api","text":"expr Code run inside fake context","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_mock_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serve a mock API from files — with_mock_api","text":"result expr","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_mock_api.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Serve a mock API from files — with_mock_api","text":"Requests translated mock file paths according several rules incorporate request method, URL, query parameters, body. See build_mock_url() details. File paths API fixture files may relative 'tests/testthat' directory, .e. relative .R test files . default location storing retrieving mocks, can put anywhere want long set appropriate location .mockPaths().","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/with_mock_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Use or create mock files depending on their existence — with_mock_dir","title":"Use or create mock files depending on their existence — with_mock_dir","text":"context switch .mockPaths() tests/testthat/dir (resets ). tests/testthat/dir folder exist, capture_requests() run create mocks. exists, with_mock_api() run. re-record mock files, simply delete tests/testthat/dir run test.","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_mock_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use or create mock files depending on their existence — with_mock_dir","text":"","code":"with_mock_dir(dir, expr, simplify = TRUE, replace = TRUE)"},{"path":"https://enpiar.com/r/httptest/reference/with_mock_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use or create mock files depending on their existence — with_mock_dir","text":"dir character string, unique folder name used created tests/testthat/ expr Code run inside fake context simplify logical: TRUE (default), JSON responses status 200 written just text response body. cases, simplify FALSE, \"response\" object written .R file using base::dput(). replace Logical: mock directory replace current mock directories? Default TRUE.","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around 'trace' to untrace when finished — with_trace","title":"Wrapper around 'trace' to untrace when finished — with_trace","text":"Wrapper around 'trace' untrace finished","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around 'trace' to untrace when finished — with_trace","text":"","code":"with_trace(   x,   where = topenv(parent.frame()),   print = getOption(\"httptest.debug\", FALSE),   ...,   expr )"},{"path":"https://enpiar.com/r/httptest/reference/with_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around 'trace' to untrace when finished — with_trace","text":"x Name function trace. See base::trace(). look function traced. print Logical: print message every time traced function hit? Default FALSE; note trace, default TRUE. ... Additional arguments pass trace. minimum, must include either tracer exit. expr Code run inside context","code":""},{"path":"https://enpiar.com/r/httptest/reference/with_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper around 'trace' to untrace when finished — with_trace","text":"result expr","code":""},{"path":"https://enpiar.com/r/httptest/reference/without_internet.html","id":null,"dir":"Reference","previous_headings":"","what":"Make all HTTP requests raise an error — without_internet","title":"Make all HTTP requests raise an error — without_internet","text":"without_internet simulates situation network request fail, without internet connection. HTTP request verb functions httr raise error.","code":""},{"path":"https://enpiar.com/r/httptest/reference/without_internet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make all HTTP requests raise an error — without_internet","text":"","code":"without_internet(expr)"},{"path":"https://enpiar.com/r/httptest/reference/without_internet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make all HTTP requests raise an error — without_internet","text":"expr Code run inside mock context","code":""},{"path":"https://enpiar.com/r/httptest/reference/without_internet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make all HTTP requests raise an error — without_internet","text":"result expr","code":""},{"path":"https://enpiar.com/r/httptest/reference/without_internet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make all HTTP requests raise an error — without_internet","text":"error message raised well-defined shape, made three elements, separated space: (1) request method (e.g. \"GET\"); (2) request URL; (3) request body, present. verb-expectation functions, expect_GET() expect_POST(), look shape.","code":""},{"path":[]},{"path":"https://enpiar.com/r/httptest/reference/without_internet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make all HTTP requests raise an error — without_internet","text":"","code":"without_internet({   expect_error(     httr::GET(\"http://httpbin.org/get\"),     \"GET http://httpbin.org/get\"   )   expect_error(httr::PUT(\"http://httpbin.org/put\",     body = '{\"a\":1}'   ),   'PUT http://httpbin.org/put {\"a\":1}',   fixed = TRUE   ) }) #> <simpleError: PUT http://httpbin.org/put {\"a\":1}>"},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-420","dir":"Changelog","previous_headings":"","what":"httptest 4.2.0","title":"httptest 4.2.0","text":"CRAN release: 2023-05-28 with_mock_dir() uses requester set set_requester() (#70, @maelle). capture_requests() can used without loading library(httptest) (#77, @kforner). stop_mocking() correctly untraces functions (#79, @kforner). get_current_requester() now included within package exports match behavior get_current_redactor() (#81, @stephenashton-dhsc).","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-410","dir":"Changelog","previous_headings":"","what":"httptest 4.1.0","title":"httptest 4.1.0","text":"CRAN release: 2021-09-22 Function alias with_mock_API, deprecated 3.0.0, removed. Update tests upcoming release testthat.","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-400","dir":"Changelog","previous_headings":"","what":"httptest 4.0.0","title":"httptest 4.0.0","text":"CRAN release: 2021-02-01","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"changes-for-compatibility-with-testthatrd-edition-4-0-0","dir":"Changelog","previous_headings":"","what":"Changes for compatibility with testthat 3rd edition","title":"httptest 4.0.0","text":"expect_header() now emits single warning headers included call (instead one warning per header). makes catching multiple headers easier prevents excess warnings using testthat 3e (#38, @jonkeane) Quiet extraneous message untracing curl::form_file() (#35, @dmenne) Numerous internal testing changes ensure compatibility testthat 3e","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"other-fixes-and-enhancements-4-0-0","dir":"Changelog","previous_headings":"","what":"Other fixes and enhancements","title":"httptest 4.0.0","text":"Add with_mock_dir() allows automatically switch recording playing back test (#48, @maelle). Mocking PUT POST body consisting httr::upload_file() longer leaves file connection open. Mock files special characters filename now correctly found (#33, @natbprice) Many improvements interactive test running mock recording, including .mockPaths() prefer use tests/testthat exists (.e. running interactively package root directory) (#52) start_vignette() similarly prefers vignettes directory (#55). Function aliases with_fake_HTTP buildMockURL, deprecated 3.0.0, removed. Testing: switch continuous integration use GitHub Actions (#36, @jonkeane); rename helper.R setup.R per testthat’s latest recommendations (#44, @maelle)","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-330","dir":"Changelog","previous_headings":"","what":"httptest 3.3.0","title":"httptest 3.3.0","text":"CRAN release: 2020-01-28 (Re)load package redactors loading package interactively pkgload::load_all(), formerly devtools (#15) expect_header() now defaults ignore.case = TRUE HTTP header names case insensitive. Support mocking file uploads via httr::upload_file platforms (#25) Remove deprecated redact verbose arguments capture_requests","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-322","dir":"Changelog","previous_headings":"","what":"httptest 3.2.2","title":"httptest 3.2.2","text":"CRAN release: 2018-12-07 Patch compatibility upcoming 1.4.0 release httr.","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-320","dir":"Changelog","previous_headings":"","what":"httptest 3.2.0","title":"httptest 3.2.0","text":"CRAN release: 2018-11-09 use_httptest() convenience setting new package Warn capturing requests httr request function errors response file written (#16) Support recording capture_requests() directly calling GET et al. interactively httr package attached (#17) Support regular expression matching URLs request bodies expect_GET() et al. (#19)","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-310","dir":"Changelog","previous_headings":"","what":"httptest 3.1.0","title":"httptest 3.1.0","text":"CRAN release: 2018-06-19","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"better-more-efficient-response-recording-3-1-0","dir":"Changelog","previous_headings":"","what":"Better, more efficient response recording","title":"httptest 3.1.0","text":"capture_requests() longer includes “request” object inside recorded response writing .R verbose responses. 3.0.0, with_mock_api() inserts current request loading mock files, overwritten anyway. eliminates (though ) need redacting responses. result, redacting functions redact_oauth() redact_http_auth() removed acted response$request, now dropped entirely. capture_requests() record simplified response bodies range Content-Types simplify = TRUE (default). Previously, .json (Content-Type: application/json) recorded simple text files; now, .html, .xml, .txt, .csv, .tsv supported. recording simplify = TRUE, HTTP responses 204 Content status now written empty files .204 extension. saves around 2K disk space per file. with_mock_api() now can also load newly supported file types. Bare JSON files written capture_requests() now “prettified” (.e. multiline, nice indentation). capture_requests() now records responses httr::RETRY() (#13)","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"vignette-setup-and-teardown-3-1-0","dir":"Changelog","previous_headings":"","what":"Vignette setup and teardown","title":"httptest 3.1.0","text":"Store package-level vignette setup teardown code, called inside start_vignette() end_vignette(), inst/httptest/start-vignette.R inst/httptest/end-vignette.R, respectively. Like package redactors request preprocessors, automatically executed whenever package loaded start/end_vignette called. makes easy write multiple vignettes without copy paste much setup code. See vignette(\"vignettes\") details.","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"other-enhancements-and-options-3-1-0","dir":"Changelog","previous_headings":"","what":"Other enhancements and options","title":"httptest 3.1.0","text":"gsub_response() now applies URL Location header, found. Add options(httptest.max.print) allow ability specify length truncate request body printed error message requests with_mock_api(). Useful debugging mock files found large request bodies. Add options(httptest.debug), TRUE prints details functions traced (base::trace()) ’re called. Deprecate “verbose” argument capture_requests(): use options(httptest.verbose) instead.","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-300","dir":"Changelog","previous_headings":"","what":"httptest 3.0.0","title":"httptest 3.0.0","text":"CRAN release: 2018-01-16","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"major-features-3-0-0","dir":"Changelog","previous_headings":"","what":"Major features","title":"httptest 3.0.0","text":"Write vignettes R Markdown documents communicate remote API using httptest. Add code chunk beginning document including start_vignette(). first time run document, real API responses recorded subfolder vignettes directory. Subsequent vignette builds use recorded responses, allowing document regenerate without network connection API credentials. document needs handle changes server state, make API request creates record server, add call change_state(). See vignette(\"vignettes\") discussion links examples. Packages can now default redacting function, whenever package loaded, capture_requests() apply function responses records. ensures never forget sanitize API responses need use custom function. take advantage feature, put function (response) {...} file inst/httptest/redact.R package. See updated vignette(\"redacting\", package = \"httptest\") . can also now provide function preprocess mock requests. can particularly shortening URLs—thus mock file paths—CRAN-mandated constraints file path lengths (“non-portable file paths”). machinery works similar redacting responses recording , except operates request objects inside with_mock_api(). use , either pass function (request) {...} set_requester() R session, define one package, put function (request) {...} file inst/httptest/request.R. gsub_request() particularly useful . vignette(\"redacting\", package = \"httptest\") details.","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"other-big-changes-and-enhancements-3-0-0","dir":"Changelog","previous_headings":"","what":"Other big changes and enhancements","title":"httptest 3.0.0","text":"Standardize exported functions snake_case rather camelCase better align httr testthat (except .mockPaths(), follows base::.libPaths()). Exported functions renamed retained old aliases release, deprecated. use_mock_api() block_requests() enable request altering behavior with_mock_api() without_internet(), respectively, without enclosing context. (use_mock_api called inside start_vignette().) turn mocking, call stop_mocking(). Internal change: mocking contexts longer use testthat::with_mock() instead use trace(). capture_requests()/start_capturing() now allow call .mockPaths() actively recording can record server state changes different mock “layer”. Previously, recording path fixed context initialized. redact argument capture_requests()/start_capturing() deprecated favor set_redactor(). function can take function (response) {...}; formula shorthand anonymous function . “response” argument, purrr package; list functions chained together; NULL disable default redact_auth(). redact_headers() within_body_text() longer return redacting functions. Instead, take response first argument. makes natural use chain together custom redacting functions. instead return function , see .redactor(). gsub_response() new redactor regular-expression replacement (via base::gsub()) within response’s body text URL. .mockPaths() keeps unique path values, consistent base::.libPaths(). Option \"httptest.verbose\" govern extra debug messaging (automatically turned start_vignette()) Fix bug write_disk responses recorded one location moved another directory loaded","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-234","dir":"Changelog","previous_headings":"","what":"httptest 2.3.4","title":"httptest 2.3.4","text":"CRAN release: 2017-11-14 Ensure forward compatibility change deparse() development version R (r73699).","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-232","dir":"Changelog","previous_headings":"","what":"httptest 2.3.2","title":"httptest 2.3.2","text":"CRAN release: 2017-10-20 Add redact_oauth() purge httr::Token() objects requests (#9). redact_oauth() built redact_auth(), default redactor, action required start using .","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-230","dir":"Changelog","previous_headings":"","what":"httptest 2.3.0","title":"httptest 2.3.0","text":"Remove support mocking utils::download.file(), testthat longer permits . Use httr::GET(url, config = write_disk(filename)) instead, httptest now robustly supports capture_requests().","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-220","dir":"Changelog","previous_headings":"","what":"httptest 2.2.0","title":"httptest 2.2.0","text":"Add redacting functions (redact_auth(), redact_cookies(), redact_http_auth(), redact_headers(), within_body_text()) can specified capture_requests() sensitive information like tokens ids can purged recorded response files. default redacting function redact_auth(), wraps several . See vignette(\"redacting\", package = \"httptest\") . loading JSON mock response, current “request” object now included response returned, case real responses. Remove file size limitation mock files loaded with_mock_api() skip_if_disconnected() now also wraps testthat::skip_on_cran() tests require real network connection don’t cause flaky test failure CRAN","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-212","dir":"Changelog","previous_headings":"","what":"httptest 2.1.2","title":"httptest 2.1.2","text":"CRAN release: 2017-08-04 Fix compatibility upcoming release httr affected non-GET requests contain request body.","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-210","dir":"Changelog","previous_headings":"","what":"httptest 2.1.0","title":"httptest 2.1.0","text":"CRAN release: 2017-07-31 with_mock_api() without_internet() handle multipart urlencoded form data mocked HTTP requests. buildMockURL() escapes URL characters valid file names R platforms (R CMD check warn ). capture_requests() now verbose argument, , TRUE, prints message file path captured request written. capture_requests() takes first element .mockPaths() default “path” argument. default unchanged since .mockPaths() default returns current working directory, just “path” default , set different mock path reading mocks, capture_requests() write well.","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-200","dir":"Changelog","previous_headings":"","what":"httptest 2.0.0","title":"httptest 2.0.0","text":"CRAN release: 2017-06-05 capture_requests() now writes non-JSON-content-type non-200-status responses full “response” objects .R files. with_mock_api() now looks .R mocks .json mock isn’t found. allows requests responses, just JSON content, mocked. New .mockPaths() function, model .libPaths(), allows specify alternate directories search mock API responses. Documentation enriched vignette(\"httptest\") added.","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-130","dir":"Changelog","previous_headings":"","what":"httptest 1.3.0","title":"httptest 1.3.0","text":"CRAN release: 2017-04-13 New context capture_requests() collect responses real requests store mock files with_trace() convenience wrapper around trace/untrace mockDownload() now processes request URLs mock_request() ","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-120","dir":"Changelog","previous_headings":"","what":"httptest 1.2.0","title":"httptest 1.2.0","text":"CRAN release: 2017-03-22 Add support with_mock_api() loading request fixtures HTTP verbs, GET (#4). Include request body mock file path hashing. buildMockURL() can accept either ‘request’ object character URL Bump mock payload max size 128K","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-112","dir":"Changelog","previous_headings":"","what":"httptest 1.1.2","title":"httptest 1.1.2","text":"Support full URLs, just file paths, with_mock_api() (#1)","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-110","dir":"Changelog","previous_headings":"","what":"httptest 1.1.0","title":"httptest 1.1.0","text":"CRAN release: 2017-02-03 expect_header() assert HTTP request header Always prune leading “:///” appears with_mock_api() URL querystring","code":""},{"path":"https://enpiar.com/r/httptest/news/index.html","id":"httptest-100","dir":"Changelog","previous_headings":"","what":"httptest 1.0.0","title":"httptest 1.0.0","text":"CRAN release: 2016-12-31 Initial addition functions tests, largely pulled httpcache crunch.","code":""}]
